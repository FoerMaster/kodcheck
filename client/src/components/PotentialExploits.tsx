import { useToast } from "@/hooks/use-toast";
import { highlightCode } from "@/utils/codeHighlight";

interface Exploit {
  id: string;
  title: string;
  description: string;
  severity: string;
  filePath: string;
  lineNumber: number;
  code: string;
  recommendation: string;
}

interface PotentialExploitsProps {
  exploits: Exploit[];
}

export default function PotentialExploits({ exploits }: PotentialExploitsProps) {
  const { toast } = useToast();
  
  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    toast({
      title: "Copied to clipboard",
      description: "Code snippet copied successfully",
    });
  };
  
  return (
    <>
      <h2 className="text-xl font-bold mb-4">Potential Exploits</h2>
      
      {exploits.length > 0 ? (
        <div className="space-y-4">
          {exploits.map(exploit => (
            <div 
              key={exploit.id}
              className={`bg-slate-800 rounded-lg border ${
                exploit.severity === 'critical' ? 'border-red-700' : 'border-amber-700'
              } p-4`}
            >
              <div className="flex items-start">
                <div className={`${
                  exploit.severity === 'critical' ? 'bg-red-500/20' : 'bg-amber-500/20'
                } p-2 rounded flex-shrink-0 mr-3`}>
                  <svg xmlns="http://www.w3.org/2000/svg" className={`h-5 w-5 ${
                    exploit.severity === 'critical' ? 'text-red-500' : 'text-amber-500'
                  }`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                  </svg>
                </div>
                <div>
                  <h3 className={`font-semibold ${
                    exploit.severity === 'critical' ? 'text-red-400' : 'text-amber-400'
                  }`}>
                    {exploit.title}
                  </h3>
                  <p className="text-sm text-slate-400 mb-3">
                    {exploit.description}
                  </p>
                  
                  <div className="bg-slate-900 rounded-md p-3 font-mono text-sm overflow-x-auto mb-3 relative">
                    <button 
                      className="absolute top-2 right-2 text-slate-500 hover:text-white"
                      onClick={() => copyToClipboard(exploit.code)}
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                      </svg>
                    </button>
                    <pre
                      className="text-slate-300"
                      dangerouslySetInnerHTML={{ __html: highlightCode(exploit.code) }}
                    ></pre>
                  </div>
                  
                  <div className="bg-slate-700/50 rounded-md p-3 text-sm">
                    <span className={`${
                      exploit.severity === 'critical' ? 'text-red-400' : 'text-amber-400'
                    } font-medium`}>
                      {exploit.severity === 'critical' ? 'CRITICAL SECURITY RISK:' : 'SECURITY RISK:'}
                    </span>
                    <p className="text-slate-300 mt-1">
                      {exploit.recommendation}
                    </p>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div className="bg-slate-800 rounded-lg border border-slate-700 p-8 text-center">
          <p className="text-slate-400">No potential exploits found. Your server is secure!</p>
        </div>
      )}
    </>
  );
}
